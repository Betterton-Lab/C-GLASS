#include "rng.h"
#include "omp.h"

#define BOX_SIZE 100
#define N_OBJ 1000000
#define N_PAR 12
#define SEED 419694816
#define NDIM 2
#define NTHREADS 4

int ix(int x, int y) {
  return N_DIM*x+y;
}

//class Obj {
  //private:
    //double pos_[NDIM];
    //static long seed_;
    //RNG rng_;
  //public:
    //Obj() {
      //rng_.Init(seed_);
      //seed_ = 1000*gsl_rng_get(rng_.r)-gsl_rng_get(rng_.r);
      //for (int i=0; i<NDIM; ++i) {
        //pos_[i] = BOX_SIZE*gsl_rng_uniform_pos(rng_.r);
      //}
    //}
//};
//long Obj::seed_ = SEED;

int main() {
  //RNG rng;
  //rng.Init(SEED);
  long seed = SEED;
  //std::vector<Obj> objs;
  //objs.resize(N_OBJ);
  double obj_pos[N_OBJ][NDIM];
#pragma omp parallel
  {
   int tid = omp_get_thread_num();
    for(int i = (N_OBJ/NTHREADS) * tid; i < (N_OBJ/NTHREADS) * (tid+1) ; ++i) {
      for (int j=0;j<NDIM;++j) {
        obj_pos[i][j] = 1;
        //obj_pos[i][j] = BOX_SIZE*gsl_rng_uniform_pos(rng.r);
      }
    }
  }
  //CreatePairs();
  //delete rng;
  return 0;
}


