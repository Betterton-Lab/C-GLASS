# config_params.yaml file: When simcore_config is run, this file is read to generate 
# system_parameters structure as well as code for parsing parameters in parameter yaml file.

seed : [7859459105545,long]          # Seed for random number generator, sets initial conditions.
n_runs: [1, int]                     # Number of simulations to perform using identical parameters
                                     # with unique initial conditions (new seed).
n_random: [1, int]                   # Number of samples when using randomly-sampled parameters.
run_name: [sc,string]                # Prefix used to label output files.
n_dim : [3,int]                      # Dimensionality of system. 2 or 3.
n_periodic : [0,int]                 # Number of periodic dimensions. Should be <= n_dim.
boundary : [0,int]                   # 0: No boundary condition constraints.
                                     # 1: Box-like boundary condition.
                                     # 2: Spherical BC with radius of system_radius.
                                     # 3: Budding-yeast BC with mother and daughter cell.
system_radius : [100,double]         # Sets system volume. 1D system length is 2 x system_radius.
n_steps : [1000000,int]              # Number of steps to run simulation before completion.
i_step: [0, int]                     # Internal parameter used for tracking simulation iteration.
delta : [0.001,double]               # Simulation time duration between each simulation step.
cell_length: [10, double]            # Default width of cells used in cell list. Should be set 
                                     # internally based on other system parameters.
n_update_cells: [0, int]             # If > 0, updates cell list every n_update_cells steps.
                                     # Otherwise, updates when particles move a fraction of the
                                     # cell length.
graph_flag : [0, int]                # Whether to run simulation with live graphics.
n_graph : [1000,int]                 # Number of simulation steps between refreshing graphics.
graph_diameter : [0,double]          # If > 0, draws particles with a diameter of graph_diameter.
graph_background : [1,int]           # If zero, black background, if 1, white background.
draw_boundary: [1, int]              # If set to zero, does not draw system boundary conditions.
load_checkpoint: [0, int]            # Flag for reading checkpoint file corresponding to
                                     # input parameter file. Equiv to "./simcore -l params.yaml"
checkpoint_run_name: [sc, string]    # Internal parameter for tracking checkpoint file run name.
n_load: [0, int]                     # Internal parameter for keeping track of reload numbers
print_complete: [0, int]             # 0, redraw text to update sim complete percentage,
                                     # >0, print new line for each percentage update.
movie_flag : [0, int]                # Generate bitmaps of graphics window to movie_directory
movie_directory : [frames,string]    # Directory to output graphics bitmaps
time_analysis : [0,int]              # Generate output file with simulation runtime data
bud_height : [680,double]            # center separation of mother and daughter cells
bud_radius : [300,double]            # radius of daughter cell
lj_epsilon: [1, double]              # Energy scaling factor for Lennard-Jones potential
wca_eps: [1,double]                  # Energy scaling factor for WCA potential
wca_sig: [1,double]                  # Distance scaling factor for WCA potential
ss_a: [1,double]                     # Soft shoulder potential parameter.
ss_rs: [1.5,double]                  # Soft shoulder potential distance scaling parameter.
ss_eps: [1,double]                   # Soft shoulder potential energy scaling parameter.
f_cutoff: [2000,double]              # Maximum force generated by interaction potentials
constant_pressure: [0, int]          # Flag to maintain constant pressure: system volume may vary.
constant_volume: [0, int]            # Flag to adiabatically resize system volume to target volume.
target_pressure: [0, double]         # Target pressure for constant pressure.
target_radius: [100, double]         # Target volume for constant volume.
pressure_time: [100, int]            # No. steps to reach target pressure in constant pressure sim.
compressibility: [1, double]         # Scaling param for unit cell updates for constant pressure.
stoch_flag: [1, int]                 # Flag for toggling Brownian motion in various species.
thermo_flag: [0, int]                # Output stress tensor and pressure/volume information every
                                     # n_thermo steps.
n_thermo: [1000, int]                # How often to output thermo info.
interaction_flag: [1, int]           # If zero, skips checking for particle interactions.
species_insertion_failure_threshold: [10000,int] # Threshold used during species insertion for
                                                 # triggering a re-insertion of all species
species_insertion_reattempt_threshold: [10, int] # Maximum number of attempts to reinsert all
                                                 # species. May need to set higher for high
                                                 # densities with randomized insertion.
uniform_crystal: [0, int]            # Insert species onto uniform crystal lattice.
n_steps_equil: [0, int]              # Used for analysis. Waits for system to equilibriate for
                                     # n_steps_equil steps before beginning analyses.        
n_steps_target: [100000, int]        # Used for adiabatically varying parameters, parameters will
                                     # reach their target parameter in n_steps_target steps.
static_particle_number: [0, int]     # Tells interaction engine that particle number will never
                                     # change, circumventing certain book-keeping functions.
checkpoint_from_spec: [0, int]       # Generate a checkpoint file from an existing spec file.
potential: [wca, string]             # Specifies interaction potential between all particles.
soft_potential_mag: [10, double]     # Energy scaling parameter for GEM-8 potential.
soft_potential_mag_target: [-1, double] # If >= 0, rescales GEM-8 energy to meet target in 
                                        # n_steps_target steps.
like_like_interactions: [1,int]      # If zero, particles of the same species do not interact.
auto_graph: [0,int]                  # If > 0 and graph_flag > 0, graphics window does not wait
                                     # for user to hit ESC before running. Useful for movies.
local_order_analysis: [0, int]       # Flag for post-process analysis of local order parameters in
                                     # 2D. Measures average order parameters as a function of r,
                                     # distance. Returns 2D heat map of order parameter magnitude.
local_order_width: [50, double]      # Maximum distance r when calculating local order parameter.
local_order_bin_width: [0.5, double] # Mesh size to use when binning order parameter heat map.
local_order_n_analysis: [100, int]   # Frequency of calculating order parameter values.
density_analysis: [0, int]           # Calculates structure factors from FT of density.
density_bin_width: [0.1, double]     # Mesh size to use when binning structure factor.
density_com_only: [0, int]           # Only use center of mass of objects for structure factor.
polar_order_analysis: [0, int]       # Flag for post-process analysis of polar order parameter.
                                     # Used for quantifying flocking-like behavior of objects.
polar_order_n_bins: [100, int]       # Bin size to use for polar order parameter histogram.
polar_order_contact_cutoff: [3, double] # Sets x-axis scale of polar order parameter histogram,
                                        # and ranges from contact number of 0 to the cutoff.
overlap_analysis: [0, int]           # Post-process analysis counting number of object overlaps.
highlight_overlaps: [0, int]         # Highlights objects that are overlapping in post-process
                                     # graphics.
reduced: [0, int]                    # Internal parameter used to track reductions.
reload_reduce_switch: [0, int]       # If a reduction is performed before a reload, this parameter
                                     # tells simcore to look for the proper file name, e.g.
                                     # run_name_reduced_xx_reload_yy_params.yaml instead of
                                     # run_name_reload_yy_reduced_xx_params.yaml.
flock_polar_min: [0.5, double]       # Polar order cutoff used for determining whether an object 
                                     # is in a flocking state.
flock_contact_min: [1.5, double]     # Contact number cutoff used for flocking determination.
highlight_flock: [0, int]            # Flag that adds highlighting to high polar order objects
                                     # in post-process graphics and movies.
flock_color_ext: [1.57, double]      # Color of flocking objects at the flock exterior. Uses same
                                     # color scheme as that of color in species parameters.
flock_color_int: [4.71, double]      # Color of flocking objects at the flock interior.
in_out_flag: [0, int]                # Post-process analysis of incoming vs outgoing angle of 
                                     # colliding filaments.
checkpoint_flag: [0, int]            # Generate a checkpoint file every n_checkpoint steps that 
                                     # allows users to resume previous simulations. Contains 
                                     # most recent instance of RNG state and spec file data.
n_checkpoint: [10000, int]           # Frequency used for generating checkpoint file information.

species:                             # Shared parameters used for all species.
  num: [0, int]                      # Number of members of a species at initialization.
  insertion_type: [random, string]   # Insertion method for initializing members of a species:
                                     # Must be defined in the virtual Init() function for species
                                     # members to be effective. All objects have a random 
                                     # insertion method and custom insertion method.
  insert_file: [none, string]        # When using insertion_type of custom, this file specifies
                                     # the position and orientation of each member of the species.
  overlap: [0, int]                  # If > 0, allow species members to overlap at initialization.
  draw_type: [orientation, string]   # Method used for coloring members when using graphics. Can
                                     # be one of orientation, fixed, or bw. When bw, objects will
                                     # be the opposite color of the graph_background color.
  color: [0,double]                  # Color of objects when using graphics. Corresponds to a
                                     # color wheel that ranges from 0 to 2*Pi, corresponding to 
                                     # the colors used for object orientations.
  posit_flag: [0, int]               # Generate posit output file with information of object 
                                     # positions and orientations every n_posit steps.
  spec_flag: [0, int]                # Generate detailed output file unique for every species that
                                     # can completely reconstruct member information with a
                                     # frequency of n_spec steps.
  n_posit: [100, int]                # Frequency used for generating posit file information.
  n_spec: [100, int]                 # Frequency used for generating spec file information.
filament:                            # Parameters unique to filament class of objects.
  diameter: [1, double]              # Diameter of filament in units of simulation length scale.
  length: [-1, double]               # Length of filament. If < 0, a uniform random length is
                                     # assigned to each filament between min_length and max_length.
  persistence_length: [400, double]  # Persistence length of filament.
  max_length: [500,double]           # Maximum filament length. Also used for dynamic instability.
  min_bond_length: [1.5, double]     # Minimum bond length. When using dynamic instability, the
                                     # number of bonds used to discretize filament may change while
                                     # filament is growing or shrinking to stay in range.
  spiral_flag: [0, int]              # Initializes filaments in an archimedean spiral centered at
                                     # system origin.
  spiral_number_fail_condition: [0, double] # When spiral flag is on, terminates simulation when the
                                            # spiral number of a filament is less than this value.
  driving_factor: [0, double]        # Force density used to propel active filaments.
  friction_ratio: [2, double]        # Ratio of filament friction, perpendicular / parallel.
  dynamic_instability_flag : [0,int] # Flag for modeling dynamic instability of filaments. Filaments
                                     # will polymerize at a rate of v_poly and depolymerize at a 
                                     # rate v_depoly, and switches between the two states 
                                     # stochastically with Poisson frequencies dictated by 
                                     # f_shrink_to_grow, etc. Will use a 3-state polymerization 
                                     # model if one of f_pause_to_shrink, etc frequencies are nonzero.
  force_induced_catastrophe_flag : [0,int] # Induces a force-dependent depolymerization rate for
                                           # forces applied to the filament tip.
  optical_trap_flag: [0, int]        # At initialization, the tail of every filament will be tethered
                                     # to its current position by a spring-like force.
  optical_trap_spring: [20, double]  # Spring constant used for optical trap forces.
  optical_trap_fixed: [0, int]       # If 0, optical trap lets filaments swing freely. If 1, filament
                                     # orientations are fixed by applying a second optical trap at the
                                     # head of the tail bond.
  cilia_trap_flag: [0, int]          # If this and optical trap flag are activated, filaments oriented
                                     # along positive dimension axes will have their tails fixed in
                                     # optical traps, and those oriented along negative axes will have
                                     # their heads fixed in optical traps.
  fic_factor: [0.828,double]         # Constant used in exponential term of force-induced catastrophe.
  f_shrink_to_grow : [0.017,double]  # Frequencies for polymerization rate switching when using 
  f_shrink_to_pause : [0.0,double]   # dynamic instability.
  f_pause_to_grow : [0.0,double]
  f_pause_to_shrink : [0.0,double]
  f_grow_to_pause : [0.0,double]
  f_grow_to_shrink : [0.00554,double]
  metric_forces : [1,int]           # Apply pseudo-forces to filaments to properly sample filament 
                                    # conformations according to Boltzmann factor from bending energy.
  v_poly : [0.44,double]            # Speed of filament lengthening when filament is in grow state.
  v_depoly : [0.793,double]         # Speed of shortening when filament is in shrink state.
  theta_analysis: [0, int]          # Run post-process analysis of filament conformation for testing
                                    # persistence length. Outputs histogram of angle distributions
                                    # between neighboring bonds to compare to theory.
  lp_analysis: [0,int]              # Test persistence length by measuring mean-square end-to-end
                                    # distance of filament in post-process analysis. Outputs mse2e
                                    # file that measures mean-square end-to-end distance and variance.
  global_order_analysis: [0, int]   # Post-process analysis of global order parameters, such as global
                                    # polar order, global nematic order, global spiral number, etc.
  packing_fraction: [-1, double]    # If num > 0, and packing fraction > 0, filaments are inserted
                                    # until the ratio filament to system volumes match this value.
  perlen_ratio: [-1, double]        # If perlen ratio >= 0, sets the persistence length of filaments
                                    # such that the persistence length to length ratio is this value.
  n_bonds: [-1, int]                # If > 0, sets the number of filament bonds at initialization 
                                    # using this value instead of min_bond_length, etc values.
  driving_method: [0, int]          # If 0, driving forces are centered on bonds, and propulsion 
                                    # forces are directed along bond orientation. If 1, driving forces
                                    # are centered on sites and forces are directed tangent to sites.
  n_equil: [0, int]                 # Internal filament parameter used for shuffling.
  orientation_corr_analysis: [0, int] # Post-process analysis of orientation correlation function.
  orientation_corr_n_steps: [1000,int] # Number of steps to measure orientation correlation, defines
                                       # interval over which to average.
  crossing_analysis: [0, int]       # Apply post-process analysis of filament crossing events.
  intrinsic_curvature: [0, double]  # Curvature per unit length to apply on filament. Defines the
                                    # curvature of zero bending energy. Positive is right-handed.
  flagella_flag: [0, int]           # Applies a sinusoidal, time-varying intrinsic curvature along 
                                    # filament.
  flagella_freq: [1, double]        # Frequency at which to oscillate intrinsic curvature of flagella.
  flagella_period: [2, double]      # Period of sinusoid to apply along filament length.
  flagella_amplitude: [1, double]   # Defines amplitude of sinuosoid to apply along filament length.
  flocking_analysis: [0, int]       # Post-process analysis of measuring flocking filaments.
                                    # Generates output file giving number of flocking filaments as
                                    # well as number of exterior and interior flocking filaments.
  polydispersity_flag: [0, int]     # If > 0, assign length from Flory-Schulz distribution
  polydispersity_factor: [0.03, double]  # Factor to use in Flory-Schulz distribution. A sane
                                         # polydispersity factor should be between 0.001 and 0.5.
  polydispersity_warn_on_truncate: [0, int]  # whether to warn when polydispersity distribution is 
                                             # truncated due to min_bond_length or max_length

br_bead:
  diameter: [1, double]
  driving_factor: [0, double]
  packing_fraction: [-1, double]
md_bead:
  diameter: [1, double]
  mass: [1, double]
  driving_factor: [0, double]
centrosome:
  diameter: [10,double]
  n_filaments_min: [0,int]
  n_filaments_max: [10,int]
  fixed_spacing: [0,int]
  alignment_potential: [0,int]
  k_spring: [1000,double]
  k_align: [0, double]
  spring_length: [0,double]
spherocylinder:
  diameter: [1, double]
  length: [5, double]
  diffusion_analysis: [0, int]
  n_diffusion_samples: [1, int]
  midstep: [0, int]
spindle:
  diameter: [10,double]
  length: [20, double]
  n_filaments_bud: [1,int]
  n_filaments_mother: [0,int]
  alignment_potential: [0,int]
  k_spring: [1000,double]
  k_align: [0, double]
  spring_length: [0,double]
  spb_diameter: [5, double]
crosslink:                          # Parameters specific to crosslinks.
  concentration: [0, double]        # Concentration of crosslinkers at simulation initialization.
  diameter: [1, double]             # Sets graph diameter when using graphics.
  walker: [0, int]                  # Flag for setting directed motion of crosslink heads.
  static: [0, int]                  # Flag for setting one crosslinker head to be fixed in space
# insertion type can be random_grid, random_boundary, fixed_grid, fixed_boundary, or centered
# fixed_grid: place static crosslinkers arranged on a lattice with a spacing equal to static_spacing
# fixed_boundary: place static crosslinkers along boundary perimeter with a fixed spacing
# random_grid: place static crosslinkers randomly on a 2D grid with density of static_density
# random_boundary: place static crosslinkers randomly along perimieter of boundary
# centered: a single crosslinker fixed at the origin, for testing
  velocity: [1, double]             # Bound crosslink head velocities when walkers.
  diffusion_flag: [0, int]          # Flag allowing bound crosslink heads to diffuse.
  k_on: [10, double]                # On-rate for binding crosslinks from solution to bonds.
  k_off: [2, double]                # Off-rate for bound crosslinks to go from bound to solution.
  k_on_d: [10, double]              # On-rate for singly bound to doubly bound crosslinks.
  k_off_d: [2, double]              # Off-rate for doubly bound to singly bound crosslinks.
  force_dep_factor: [1, double]     # Scalar in exponential force-dependent off-rate of doubly-
                                    # bound crosslinks when under a load.
  polar_affinity: [0, double]       # Affinity for crosslinks to remain bound to aligned filaments.
                                    # Positive implies aligned, negative implies anti-aligned.
  k_spring: [10, double]            # Spring constant of tension forces of doubly-bound crosslinks.
  f_stall: [100, double]            # Tether forces above f_stall cause bound crosslink heads to
                                    # cease walking.
  force_dep_vel_flag: [1, int]      # Flag that causes walking crosslink heads to have force-
                                    # dependent velocity.
  k_align: [0, double]              # Torsion spring constant for alignment of crosslink.
  rest_length: [0, double]          # Spring rest length of crosslink tether.
  step_direction: [0, int]          # Sets walker direction. If negative, walks toward filament
                                    # tail. If positive, walks toward filament head.
  tether_draw_type: [orientation, string] # Method of coloring crosslink tethers using graphics.
  tether_diameter: [0.5, double]    # Diameter used for graphically representing crosslink tethers.
  tether_color: [3.1416, double]    # Color for graphically representing crosslink tethers.
  end_pausing: [0, int]             # If 0, diffusing or walking crosslinks that move off the
                                    # filament automatically unbind. If 1, crosslinks that try to
                                    # do so will remain at the filament tip until unbinding.
  r_capture: [5, double]            # Maximum distance at which to consider binding singly bound to
                                    # doubly bound crosslink.
